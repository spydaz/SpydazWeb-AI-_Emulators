<?xml version="1.0"?>
<!--
Generated by VSdocman, see http://www.helixoft.com
-->
<doc>
  <assembly>
    <name>AI_EMULATOR</name>
  </assembly>
  <members>
    <member name="T:BasicProgrammingAPP.EnvironmentalMemory">
    </member>
    <member name="T:BasicProgrammingAPP.EnvironmentalMemory.Variable">
      <summary>
Structure for variable</summary>
    </member>
    <member name="F:BasicProgrammingAPP.EnvironmentalMemory.Variable.Name">
      <summary>
Variabel name</summary>
    </member>
    <member name="F:BasicProgrammingAPP.EnvironmentalMemory.Variable.Value">
      <summary>
Value of variable</summary>
    </member>
    <member name="F:BasicProgrammingAPP.EnvironmentalMemory.Variable.Type">
      <summary>
Type ass string identifier</summary>
    </member>
    <member name="F:BasicProgrammingAPP.EnvironmentalMemory.LocalMemory">
      <summary>
Memory for variables</summary>
    </member>
    <member name="F:BasicProgrammingAPP.EnvironmentalMemory.mGlobalMemory">
    </member>
    <member name="P:BasicProgrammingAPP.EnvironmentalMemory.GlobalMemory">
      <summary>
Global memeory passed in from parent environment</summary>
    </member>
    <member name="M:BasicProgrammingAPP.EnvironmentalMemory.#ctor(BasicProgrammingAPP.EnvironmentalMemory@)">
      <summary>
A global memeory is contained within environemt for referencing</summary>
      <param name="GlobalMemory">
</param>
    </member>
    <member name="M:BasicProgrammingAPP.EnvironmentalMemory.#ctor">
      <summary>
Has no Global Memory</summary>
    </member>
    <member name="M:BasicProgrammingAPP.EnvironmentalMemory.Define(System.String@,System.String)">
      <summary>
Defines variable in environemnt if not previoulsy exisiting</summary>
      <param name="Name">
Variable name</param>
      <param name="nType">
stype such as string/ integer etc</param>
    </member>
    <member name="M:BasicProgrammingAPP.EnvironmentalMemory.AssignValue(System.String@,System.Object@)">
      <summary>
Assigns a value to the variable</summary>
      <param name="Name">
Variable name(Previoulsy Exisiting)</param>
      <param name="Value">
Value to be stored</param>
    </member>
    <member name="M:BasicProgrammingAPP.EnvironmentalMemory.GetVar(System.String@)">
      <summary>
Returns the value from the stored variable</summary>
      <param name="Name">
</param>
    </member>
    <member name="T:BasicProgrammingAPP.Evaluator">
    </member>
    <member name="F:BasicProgrammingAPP.Evaluator.GlobalEnvironment">
    </member>
    <member name="M:BasicProgrammingAPP.Evaluator.#ctor(BasicProgrammingAPP.EnvironmentalMemory@)">
      <summary>
Create a new instance of the PROGRAMMING Interpretor</summary>
      <param name="iGlobal">
Used to provide preloaded environment</param>
    </member>
    <member name="F:BasicProgrammingAPP.Evaluator.LineNumber">
      <summary>
Line number counter</summary>
    </member>
    <member name="M:BasicProgrammingAPP.Evaluator.IncrLineNumber">
      <summary>
Increases the current line number to track the line number in the program</summary>
    </member>
    <member name="M:BasicProgrammingAPP.Evaluator.Eval(System.Object@,BasicProgrammingAPP.EnvironmentalMemory)">
      <param name="Expr">
Single Literal (String Format)/ Array of Literals (String Format)</param>
      <param name="Env">
Defaulted to the Global Environment; If an environment is created then it will have the global as its parent environment; This will not be required to be instantiated if only the global Envrionment is in use; Environments should be disposed of Correctly;</param>
    </member>
    <member name="M:BasicProgrammingAPP.Evaluator.EvalBlock(System.Object@,BasicProgrammingAPP.EnvironmentalMemory)">
      <summary>
Evaluates a block of code returning the Global Environment the block environment is disposed of</summary>
      <param name="Expr">
</param>
      <param name="Env">
</param>
    </member>
    <member name="M:BasicProgrammingAPP.Evaluator.IsNumberInt(System.Object@)">
      <summary>
Checks if expr is a number, Returning number</summary>
      <param name="Expr">
</param>
    </member>
    <member name="M:BasicProgrammingAPP.Evaluator.IsString(System.Object@)">
      <summary>
Checks if Expr is string returning the string</summary>
      <param name="Expr">
</param>
    </member>
    <member name="M:BasicProgrammingAPP.Evaluator.IsArray(System.Object@)">
      <summary>
if token is an array then it contains an expression</summary>
      <param name="Expr">
</param>
    </member>
    <member name="M:BasicProgrammingAPP.Evaluator.IsVariableName(System.Object@)">
      <summary>
If Epr token is variable ake then it can be handled correctlly</summary>
      <param name="Expr">
</param>
    </member>
    <member name="M:BasicProgrammingAPP.Evaluator.IsBoolean(System.Object@)">
      <param name="Expr">
</param>
    </member>
    <member name="N:BasicProgrammingAPP.My">
    </member>
    <member name="T:BasicProgrammingAPP.My.MyApplication">
    </member>
    <member name="M:BasicProgrammingAPP.My.MyApplication.#ctor">
    </member>
    <member name="M:BasicProgrammingAPP.My.MyApplication.OnCreateMainForm">
    </member>
    <member name="N:BasicProgrammingAPP.My.Resources">
    </member>
    <member name="T:BasicProgrammingAPP.My.Resources.Resources">
      <summary>
A strongly-typed resource class, for looking up localized strings, etc.</summary>
    </member>
    <member name="F:BasicProgrammingAPP.My.Resources.Resources.resourceMan">
    </member>
    <member name="F:BasicProgrammingAPP.My.Resources.Resources.resourceCulture">
    </member>
    <member name="P:BasicProgrammingAPP.My.Resources.Resources.ResourceManager">
      <summary>
Returns the cached ResourceManager instance used by this class.</summary>
    </member>
    <member name="P:BasicProgrammingAPP.My.Resources.Resources.Culture">
      <summary>
Overrides the current thread's CurrentUICulture property for all resource lookups using this strongly typed resource class.</summary>
    </member>
    <member name="P:BasicProgrammingAPP.My.Resources.Resources.Console_A">
      <summary>
Looks up a localized resource of type System.Drawing.Bitmap.</summary>
    </member>
    <member name="P:BasicProgrammingAPP.My.Resources.Resources.Dell_UltraSharp_27">
      <summary>
Looks up a localized resource of type System.Drawing.Bitmap.</summary>
    </member>
    <member name="T:BasicProgrammingAPP.My.MySettings">
    </member>
    <member name="F:BasicProgrammingAPP.My.MySettings.defaultInstance">
    </member>
    <member name="F:BasicProgrammingAPP.My.MySettings.addedHandler">
    </member>
    <member name="F:BasicProgrammingAPP.My.MySettings.addedHandlerLockObject">
    </member>
    <member name="M:BasicProgrammingAPP.My.MySettings.AutoSaveSettings(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="P:BasicProgrammingAPP.My.MySettings.Default">
    </member>
    <member name="T:BasicProgrammingAPP.My.MySettingsProperty">
    </member>
    <member name="P:BasicProgrammingAPP.My.MySettingsProperty.Settings">
    </member>
    <member name="T:BasicProgrammingAPP.TokenGrammar">
    </member>
    <member name="M:BasicProgrammingAPP.TokenGrammar.CreateGrammar">
    </member>
    <member name="M:BasicProgrammingAPP.TokenGrammar.GETNUMBERRULE">
    </member>
    <member name="M:BasicProgrammingAPP.TokenGrammar.GETLETTERSRULE">
    </member>
    <member name="M:BasicProgrammingAPP.TokenGrammar.GETCONDITIONALOPERATORS">
    </member>
    <member name="M:BasicProgrammingAPP.TokenGrammar.GETMATHOPERATORS">
    </member>
    <member name="M:BasicProgrammingAPP.TokenGrammar.ADDFLOATPOINT">
    </member>
    <member name="T:BasicProgrammingAPP.TokenizerClass">
    </member>
    <member name="M:BasicProgrammingAPP.TokenizerClass.Tokenizer(System.String@)">
      <summary>
Returns Characters in String as list</summary>
      <param name="InputStr">
</param>
    </member>
    <member name="M:BasicProgrammingAPP.TokenizerClass.Tokenize(System.String@)">
      <param name="Str">
</param>
    </member>
    <member name="M:BasicProgrammingAPP.TokenizerClass.GetToken(System.String@,System.Collections.Generic.List{BasicProgrammingAPP.Ext.GrammarRule}@)">
      <summary>
If Token returned is nothing then no token has been found</summary>
      <param name="Tok">
Current Str Character</param>
      <param name="CurrentGramamr">
</param>
    </member>
    <member name="M:BasicProgrammingAPP.TokenizerClass.GetAST(System.String@)">
      <summary>
Returns an AST for the given text</summary>
      <param name="ProgramStr">
</param>
    </member>
    <member name="M:BasicProgrammingAPP.TokenizerClass.ParseStatementsGetAST(System.String[]@)">
      <summary>
Each line of Text can be considered to be a statement</summary>
      <returns>
Fully Populated AST TREE</returns>
      <param name="Statements">
Array of statements</param>
    </member>
    <member name="M:BasicProgrammingAPP.TokenizerClass.ParseStatementsGetTokens(System.String[]@)">
      <param name="Statements">
</param>
    </member>
    <member name="M:BasicProgrammingAPP.TokenizerClass.GetStatements(System.String@)">
      <summary>
Spilts the Text in to statements based on line endings</summary>
      <param name="Str">
</param>
    </member>
    <member name="M:BasicProgrammingAPP.TokenizerClass.Get_Abstract_Syntax_Token_TREE(System.String@)">
      <param name="Prog">
</param>
    </member>
    <member name="M:BasicProgrammingAPP.TokenizerClass.Get_Token_TREE(System.String@)">
      <param name="Prog">
</param>
    </member>
    <member name="M:BasicProgrammingAPP.TokenizerClass.RemoveTag(System.Collections.Generic.List{BasicProgrammingAPP.Ext.Token}@)">
      <summary>
Removes whiteSpace and Eof Token</summary>
      <param name="TokLst">
</param>
    </member>
    <member name="F:BasicProgrammingAPP.TokenizerClass.BeginCapture">
    </member>
    <member name="F:BasicProgrammingAPP.TokenizerClass.CapturingStr">
    </member>
    <member name="F:BasicProgrammingAPP.TokenizerClass.CapturingNum">
    </member>
    <member name="F:BasicProgrammingAPP.TokenizerClass.CapturingVar">
    </member>
    <member name="F:BasicProgrammingAPP.TokenizerClass.CapturingTerm">
    </member>
    <member name="F:BasicProgrammingAPP.TokenizerClass.CapturingLst">
    </member>
    <member name="M:BasicProgrammingAPP.TokenizerClass.CheckToken(BasicProgrammingAPP.Ext.Token@)">
      <summary>
Checks token for a Significant token The significant token is such that it is a part of the main function and needs a specific type of initiation or Termination for the token</summary>
      <param name="Tok">
usually a token literal = LETTER / NUMBER / POINT</param>
    </member>
    <member name="T:BasicProgrammingAPP.AST_TREE">
    </member>
    <member name="F:BasicProgrammingAPP.AST_TREE.Parser">
    </member>
    <member name="M:BasicProgrammingAPP.AST_TREE.ButtonParse_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:BasicProgrammingAPP.AST_TREE.ClearText">
    </member>
    <member name="M:BasicProgrammingAPP.AST_TREE.ProgText">
    </member>
    <member name="M:BasicProgrammingAPP.AST_TREE.ButtonParseTokens_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:BasicProgrammingAPP.AST_TREE.ParseTokens(System.String@)">
      <param name="Code">
</param>
    </member>
    <member name="M:BasicProgrammingAPP.AST_TREE.ParseAST(System.String@)">
      <param name="Code">
</param>
    </member>
    <member name="M:BasicProgrammingAPP.AST_TREE.FormatJsonOutput(System.String)">
      <param name="jsonString">
</param>
    </member>
    <member name="M:BasicProgrammingAPP.AST_TREE.ButtonbOTH_Click(System.Object,System.EventArgs)">
      <param name="sender">
</param>
      <param name="e">
</param>
    </member>
    <member name="M:BasicProgrammingAPP.AST_TREE.Dispose(System.Boolean)">
      <param name="disposing">
</param>
    </member>
    <member name="F:BasicProgrammingAPP.AST_TREE.components">
    </member>
    <member name="M:BasicProgrammingAPP.AST_TREE.InitializeComponent">
    </member>
    <member name="T:BasicProgrammingAPP.Ext">
    </member>
    <member name="M:BasicProgrammingAPP.Ext.SplitAtNewLine(System.String)">
      <param name="input">
</param>
    </member>
    <member name="M:BasicProgrammingAPP.Ext.ExtractLastChar(System.String@)">
      <param name="InputStr">
</param>
    </member>
    <member name="M:BasicProgrammingAPP.Ext.ExtractFirstChar(System.String@)">
      <param name="InputStr">
</param>
    </member>
    <member name="T:BasicProgrammingAPP.Ext.GrammarRule">
      <summary>
Rule for tagging text</summary>
    </member>
    <member name="M:BasicProgrammingAPP.Ext.GrammarRule.ToJson">
    </member>
    <member name="F:BasicProgrammingAPP.Ext.GrammarRule.ComponentStrings">
    </member>
    <member name="F:BasicProgrammingAPP.Ext.GrammarRule.TagString">
    </member>
    <member name="M:BasicProgrammingAPP.Ext.GrammarRule.#ctor">
    </member>
    <member name="T:BasicProgrammingAPP.Ext.Token">
      <summary>
AbstractSyntax Basic TOKEN</summary>
    </member>
    <member name="M:BasicProgrammingAPP.Ext.Token.ToJson">
    </member>
    <member name="F:BasicProgrammingAPP.Ext.Token.Name">
    </member>
    <member name="F:BasicProgrammingAPP.Ext.Token.Value">
    </member>
    <member name="T:BasicProgrammingAPP.Ext.AbstractSyntaxToken">
    </member>
    <member name="M:BasicProgrammingAPP.Ext.AbstractSyntaxToken.ToJson">
    </member>
    <member name="F:BasicProgrammingAPP.Ext.AbstractSyntaxToken.Name">
    </member>
    <member name="F:BasicProgrammingAPP.Ext.AbstractSyntaxToken.Value">
    </member>
    <member name="N:BasicProgrammingAPP">
    </member>
  </members>
</doc>
